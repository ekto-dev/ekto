// Code generated by protoc-gen-ekto. DO NOT EDIT.
// source: proto/example_service.proto
package example

import (
	"context"
	"log"
	"net"

	format "github.com/cloudevents/sdk-go/binding/format/protobuf/v2"
	cloudeventsv2 "github.com/cloudevents/sdk-go/v2"
	"github.com/cloudevents/sdk-go/v2/protocol"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

var ektoPort = ":3070"

type NotificationServiceMQProxy struct {
	server *grpc.Server
}

func NewNotificationServiceMQProxy() *NotificationServiceMQProxy {
	return &NotificationServiceMQProxy{
		server: grpc.NewServer(),
	}
}

func (p *NotificationServiceMQProxy) Register(svc NotificationServiceServer) {
	RegisterNotificationServiceServer(p.server, svc)
}

func (p *NotificationServiceMQProxy) Run(ctx context.Context, client cloudeventsv2.Client) error {
	// Start the gRPC server in a goroutine
	go func() {
		lis, err := net.Listen("tcp", ektoPort)

		if err != nil {
			log.Fatalf("failed to listen: %s", err)
		}

		if err := p.server.Serve(lis); err != nil {
			log.Fatalf("failed to serve: %s", err)
		}
	}()

	// connect to the gRPC server
	conn, err := grpc.DialContext(
		ctx,
		ektoPort,
		grpc.WithBlock(),
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)

	if err != nil {
		return err
	}

	svcClient := NewNotificationServiceClient(conn)

	return client.StartReceiver(ctx, func(ctx context.Context, event cloudeventsv2.Event) protocol.Result {
		switch event.Type() {
		case "user.created":
			// decode the cloudevent into a protobuf message
			protoEvent, err := format.ToProto(&event)
			if err != nil {
				return protocol.NewReceipt(false, "failed to decode event: %s", err.Error())
			}

			var msg *UserCreated
			err = protoEvent.GetProtoData().UnmarshalTo(msg)
			if err != nil {
				return protocol.NewReceipt(false, "failed to unmarshal event data: %s", err.Error())
			}

			_, err = svcClient.HandleUserCreated(ctx, msg)
			if err != nil {
				return protocol.NewReceipt(false, "failed to call service method: %s", err.Error())
			}
		}

		return protocol.NewReceipt(true, "")
	})
}
